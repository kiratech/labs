CONTEXT PROPAGATION

How it is possible that two different scripts, both using the 
`with trace_provider.start_as_current_span` function, but one using
`variables.APP_FRONTEND_NAME` and the other `variables.APP_BACKEND_NAME`
are tracked together?

They are tracked together through context propagation. Here's how it works:

- Frontend: When the frontend starts a span with its own name (e.g., 
  `variables.APP_FRONTEND_NAME`), it creates a trace context (which includes
  the trace ID, span ID, etc.). When it makes an HTTP request to the backend,
  the trace context is typically injected into the request headers (using
  standards like the W3C Trace Context).

- Backend: When the backend receives the request, it reads the trace context
  from the headers and starts a new span (using variables.APP_BACKEND_NAME).
  By using the incoming context as its parent, the backendâ€™s span becomes part
  of the same trace. This creates a parent-child relationship between the
  frontend and backend spans.

Even though the two scripts use different span names, they are linked because
the backend continues the trace initiated by the frontend. So, even if you
later only log the trace ID, the underlying tracing system still maintains the
relationships between spans, allowing you to see the full trace of the
operation across both services.
